### The Airflow snippets were retrieved from https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html
### and follow APACHE 2.0 Licence (see APACHE-LICENCE)
# WARNING: This configuration is for local development. Do not use it in a production deployment.

---
x-airflow-common:
  &airflow-common
  image: airflow_with_spark
  # Update build contexts
  build: 
    context: ..
    dockerfile: architecture/Dockerfile.airflow
  networks:
    - sparkpg_network 
  environment:
    &airflow-common-env
      AIRFLOW__CORE__EXECUTOR: CeleryExecutor
      # Use canonical DATABASE section key (point to airflow-postgres service)
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: 'postgresql+psycopg2://airflow:airflow@airflow-postgres:5432/airflow'
      AIRFLOW__CELERY__RESULT_BACKEND: 'db+postgresql://airflow:airflow@airflow-postgres:5432/airflow'
      AIRFLOW__CELERY__BROKER_URL: 'redis://:@redis:6379/0'
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__CORE__TEST_CONNECTION: 'Enabled'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
      # Make the project available on Python path inside the container so DAGs can import
      # the top-level `TravelMind` package from your repo root.
      PYTHONPATH: /opt/airflow/project
      PYSPARK_PYTHON: /usr/local/bin/python3
  volumes:
    - .:/app
    - spark-events:/home/sparkuser/spark/events
    - ../dags:/opt/airflow/dags
    # mount the repository root (parent of architecture/) so packages like
    # `from TravelMind...` resolve inside Airflow containers
    - ..:/opt/airflow/project
    - ../logs:/opt/airflow/logs
    - ../config:/opt/airflow/config
    - ../plugins:/opt/airflow/plugins
    - ../include:/opt/airflow/include
  user: "${AIRFLOW_UID:-50000}:1000"
  depends_on:
    &airflow-common-depends-on
    redis:
      condition: service_healthy
    airflow-postgres:
      condition: service_healthy

networks:
  sparkpg_network:

services:
  
  jar-builder:
    image: travelmind-spark:v2
    build: .
    profiles:
      - build
    entrypoint: /bin/bash
    command: -c "cd /app; sbt assembly; chown -R \"${AIRFLOW_UID}:1000\" target; chmod -R g+w target"
    user: "0:1000"
    volumes:
      - .:/app
  
  spark-master:
    image: travelmind-spark:v2
    build: .
    #container_name: spark-master
    hostname: spark-master
    networks:
      - sparkpg_network
    environment:
      - JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
    entrypoint: /bin/bash
    command: -c "/home/sparkuser/spark/sbin/start-master.sh; tail -f /dev/null"
    ports:
      - '8080:8080'
      - '4040:4040'
    volumes:
      - ../include:/opt/airflow/include
      - spark-events:/home/sparkuser/spark/events

  spark-worker:
    image: travelmind-spark:v2
    build: .
    #container_name: spark-worker1
    networks:
      - sparkpg_network
    environment:  
      - JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
    entrypoint: /bin/bash
    command: -c "/home/sparkuser/spark/sbin/start-worker.sh  spark://spark-master:7077; tail -f /dev/null"
    volumes:
      - ../include:/opt/airflow/include
      - spark-events:/home/sparkuser/spark/events
    
  spark-history-server:
    image: travelmind-spark:v2
    build: .
    container_name: spark-history-server
    networks:
      - sparkpg_network
    environment:
      - JAVA_HOME=/usr/lib/jvm/java-17-openjdk-amd64
      - PYSPARK_PYTHON=/usr/local/bin/python3
    entrypoint: /bin/bash
    command: -c "/home/sparkuser/spark/sbin/start-history-server.sh; tail -f /dev/null"
    volumes:
      - spark-events:/home/sparkuser/spark/events
    ports:
      - '18080:18080'

  # Postgresql database instance
  postgres:
    image: postgres:13
    restart: always
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - sparkpg_network
    environment:
      - POSTGRES_USER=user
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=postgres
    ports:
      - "5432:5432"

  # Website that can be used to connect, administrate and develop postgresql databases
  pgadmin:
    image: dpage/pgadmin4
    networks:
      - sparkpg_network
    environment:
      - PGADMIN_DEFAULT_EMAIL=root@root.com
      - PGADMIN_DEFAULT_PASSWORD=root
    ports:
      - "8050:80"

  minio:
    image: quay.io/minio/minio
    command: server /data --console-address ":9001"
    container_name: minio
    networks:
      - sparkpg_network
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    # volumes:
          # - minio_data:/data
    ports:
      - 9000:9000
      - 9001:9001

  mc:
    image: quay.io/minio/mc
    container_name: mc
    depends_on:
      - minio
    networks:
      - sparkpg_network
    volumes:
      - ./init-minio.sh:/init-minio.sh
      - ./minio_data.csv:/sample.csv
      - ./policy.json:/policy.json
    entrypoint: ./init-minio.sh

  airflow-postgres:
      image: postgres:13
      networks:
        - sparkpg_network
      environment:
        POSTGRES_USER: airflow
        POSTGRES_PASSWORD: airflow
        POSTGRES_DB: airflow
      healthcheck:
        test: ["CMD", "pg_isready", "-U", "airflow"]
        interval: 10s
        retries: 5
        start_period: 5s
      restart: always

  redis:
      image: redis:7.2-bookworm
      networks:
          - sparkpg_network
      expose:
        - 6379
      healthcheck:
        test: ["CMD", "redis-cli", "ping"]
        interval: 10s
        timeout: 30s
        retries: 50
        start_period: 30s
      restart: always

  airflow-webserver:
      <<: *airflow-common
      command: webserver
      ports:
        - "8090:8080"
      environment:
        <<: *airflow-common-env
        PYTHONPATH: /opt/airflow/project
        PYSPARK_PYTHON: /usr/local/bin/python3
        JAVA_HOME: /usr/lib/jvm/java-17-openjdk-amd64
      healthcheck:
        test: ["CMD", "curl", "--fail", "http://localhost:8090/health"]
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 30s
      restart: always
      depends_on:
        <<: *airflow-common-depends-on
        airflow-init:
          condition: service_completed_successfully

  airflow-scheduler:
      <<: *airflow-common
      command: scheduler
      environment:
        <<: *airflow-common-env
        PYTHONPATH: /opt/airflow/project
        PYSPARK_PYTHON: /usr/local/bin/python3
        JAVA_HOME: /usr/lib/jvm/java-17-openjdk-amd64
      healthcheck:
        test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 30s
      restart: always
      depends_on:
        <<: *airflow-common-depends-on
        airflow-init:
          condition: service_completed_successfully

  airflow-worker:
      <<: *airflow-common
      command: celery worker
      healthcheck:
        test:
          - "CMD-SHELL"
          - 'celery --app airflow.providers.celery.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}" || celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 30s
      environment:
        <<: *airflow-common-env
        # Required to handle warm shutdown of the celery workers properly
        # See https://airflow.apache.org/docs/docker-stack/entrypoint.html#signal-propagation
        DUMB_INIT_SETSID: "0"
        PYSPARK_PYTHON: /usr/local/bin/python3
        JAVA_HOME: /usr/lib/jvm/java-17-openjdk-amd64
      restart: always
      depends_on:
        <<: *airflow-common-depends-on
        airflow-init:
          condition: service_completed_successfully

  airflow-triggerer:
      <<: *airflow-common
      command: triggerer
      healthcheck:
        test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
        interval: 30s
        timeout: 10s
        retries: 5
        start_period: 30s
      restart: always
      environment:
        <<: *airflow-common-env
        JAVA_HOME: /usr/lib/jvm/java-17-openjdk-amd64
        PYSPARK_PYTHON: /usr/local/bin/python3
      depends_on:
        <<: *airflow-common-depends-on
        airflow-init:
          condition: service_completed_successfully

  airflow-init:
      <<: *airflow-common
      entrypoint: /bin/bash
      command:
        - -c
        - |
          if [[ -z "${AIRFLOW_UID}" ]]; then
            echo
            echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
            echo "If you are on Linux, you SHOULD follow the instructions below to set "
            echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
            echo "For other operating systems you can get rid of the warning with manually created .env file:"
            echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
            echo
          fi
          one_meg=1048576
          mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
          cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
          disk_available=$$(df / | tail -1 | awk '{print $$4}')
          warning_resources="false"
          if (( mem_available < 4000 )) ; then
            echo
            echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
            echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
            echo
            warning_resources="true"
          fi
          if (( cpus_available < 2 )); then
            echo
            echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
            echo "At least 2 CPUs recommended. You have $${cpus_available}"
            echo
            warning_resources="true"
          fi
          if (( disk_available < one_meg * 10 )); then
            echo
            echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
            echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
            echo
            warning_resources="true"
          fi
          if [[ $${warning_resources} == "true" ]]; then
            echo
            echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
            echo "Please follow the instructions to increase amount of resources available:"
            echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
            echo
          fi
          mkdir -p /sources/logs /sources/dags /sources/plugins
          chown -R "${AIRFLOW_UID}:1000" /sources/{logs,dags,plugins}
          chown -R "${AIRFLOW_UID}:1000" /home/sparkuser/spark/events; chmod -R g+w /home/sparkuser/spark/events
          chown -R "${AIRFLOW_UID}:1000" /app/output; chmod -R g+w /app/output
          exec /entrypoint airflow version
      environment:
        <<: *airflow-common-env
        _AIRFLOW_DB_MIGRATE: 'true'
        _AIRFLOW_WWW_USER_CREATE: 'true'
        _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
        _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
        _PIP_ADDITIONAL_REQUIREMENTS: ''
        PYSPARK_PYTHON: /usr/local/bin/python3
        JAVA_HOME: /usr/lib/jvm/java-17-openjdk-amd64
      user: "0:0"
      volumes:
        - ./output:/app/output
        - spark-events:/home/sparkuser/spark/events
        - ${AIRFLOW_PROJ_DIR:-.}:/sources

  airflow-cli:
      <<: *airflow-common
      environment:
        <<: *airflow-common-env
        CONNECTION_CHECK_MAX_COUNT: "0"
        PYSPARK_PYTHON: /usr/local/bin/python3
        JAVA_HOME: /usr/lib/jvm/java-17-openjdk-amd64
      command:
        - bash
        - -c
        - |
            airflow connections add 'spark_standalone_client' \
              --conn-json '{
                  "conn_type": "spark",
                  "host": "spark://spark-master",
                  "port": 7077
              }'
      depends_on:
        <<: *airflow-common-depends-on
        airflow-init:
          condition: service_completed_successfully
volumes:
  spark-events:
  # minio_data: