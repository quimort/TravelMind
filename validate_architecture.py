#!/usr/bin/env python3
"""
Script para validar la arquitectura TravelMind
Verifica que todos los servicios est√©n funcionando correctamente
"""

import requests
import time
import sys
from typing import Dict, List, Tuple

def check_service(name: str, url: str, timeout: int = 5) -> Tuple[bool, str]:
    """
    Verifica si un servicio est√° disponible
    """
    try:
        response = requests.get(url, timeout=timeout)
        if response.status_code == 200:
            return True, f"‚úÖ {name} est√° funcionando correctamente"
        else:
            return False, f"‚ùå {name} respondi√≥ con c√≥digo {response.status_code}"
    except requests.exceptions.ConnectionError:
        return False, f"‚ùå {name} no est√° disponible (conexi√≥n rechazada)"
    except requests.exceptions.Timeout:
        return False, f"‚ùå {name} no responde (timeout)"
    except Exception as e:
        return False, f"‚ùå {name} error: {str(e)}"

def validate_architecture() -> Dict[str, bool]:
    """
    Valida todos los servicios de la arquitectura
    """
    services = {
        "MinIO Console": "http://localhost:9001",
        "MinIO API": "http://localhost:9000/minio/health/live",
        "Spark Master UI": "http://localhost:8080",
        "Airflow Web UI": "http://localhost:8081",
        "PostgreSQL": "http://localhost:5432"  # Este fallar√° pero lo incluimos para completitud
    }
    
    results = {}
    print("üîç Validando arquitectura TravelMind...\n")
    
    for service_name, url in services.items():
        if service_name == "PostgreSQL":
            # PostgreSQL no tiene endpoint HTTP, lo marcamos como pendiente
            results[service_name] = False
            print(f"‚è≥ {service_name} - Verificaci√≥n manual requerida (puerto 5432)")
            continue
            
        success, message = check_service(service_name, url)
        results[service_name] = success
        print(message)
        time.sleep(1)  # Peque√±a pausa entre verificaciones
    
    return results

def check_docker_containers():
    """
    Verifica que los contenedores est√©n ejecut√°ndose
    """
    import subprocess
    
    print("\nüê≥ Verificando contenedores Docker...\n")
    
    try:
        result = subprocess.run(
            ["docker", "ps", "--format", "table {{.Names}}\t{{.Status}}\t{{.Ports}}"],
            capture_output=True,
            text=True,
            check=True
        )
        print(result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error al verificar contenedores: {e}")
        return False
    except FileNotFoundError:
        print("‚ùå Docker no est√° instalado o no est√° en el PATH")
        return False

def main():
    """
    Funci√≥n principal de validaci√≥n
    """
    print("=" * 60)
    print("üöÄ VALIDACI√ìN DE ARQUITECTURA TRAVELMIND")
    print("=" * 60)
    
    # Verificar contenedores Docker
    containers_ok = check_docker_containers()
    
    if not containers_ok:
        print("\n‚ùå No se pueden verificar los contenedores Docker")
        sys.exit(1)
    
    # Dar tiempo a que los servicios se inicialicen
    print("\n‚è≥ Esperando a que los servicios se inicialicen...")
    time.sleep(10)
    
    # Validar servicios
    results = validate_architecture()
    
    # Resumen
    print("\n" + "=" * 60)
    print("üìä RESUMEN DE VALIDACI√ìN")
    print("=" * 60)
    
    total_services = len(results)
    successful_services = sum(1 for success in results.values() if success)
    
    print(f"Servicios verificados: {total_services}")
    print(f"Servicios funcionando: {successful_services}")
    print(f"Tasa de √©xito: {(successful_services/total_services)*100:.1f}%")
    
    if successful_services == total_services:
        print("\nüéâ ¬°Todos los servicios est√°n funcionando correctamente!")
        return 0
    else:
        print(f"\n‚ö†Ô∏è  {total_services - successful_services} servicio(s) requieren atenci√≥n")
        return 1

if __name__ == "__main__":
    sys.exit(main())
