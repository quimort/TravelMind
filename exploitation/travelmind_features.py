from pyspark.sql import DataFrame,Window
import utils as utils
from pyspark.sql.functions import *

def start_spark():
    spark = utils.create_context()
    return spark
def convert_time_to_decimal(col_name):
    return (
        (split(col(col_name), ":").getItem(0).cast("double")) + 
        (split(col(col_name), ":").getItem(1).cast("double") / 60.0)
    )
def convert_decimal_to_time(col_name):
    hours = floor(col(col_name)).cast("int")
    minutes = round((col(col_name) - hours) * 60).cast("int")
    
    return (
        format_string("%02d:%02d", hours, minutes)
    )
def create_apartment_features(df_apartments):
    """Create apartment-based features."""
    print("  Creating apartment features...")
    
    df_apartment_features = df_apartments.groupBy(
        col("AÑO"),
        col("MES"),
        col("PROVINCIA")
    ).agg(
        sum("VIAJEROS").alias("apt_viajeros"),
        sum("PERNOCTACIONES").alias("apt_pernoctaciones"),
        avg("ESTANCIA_MEDIA").alias("apt_estancia_media"),
        avg("GRADO_OCUPA_PLAZAS").alias("avg_ocupa_plazas"),
        avg("GRADO_OCUPA_APART").alias("avg_ocupa_apart"),
        avg("GRADO_OCUPA_APART_FIN_SEMANA").alias("avg_ocupa_apart_weekend"),
        sum("APARTAMENTOS_ESTIMADOS").alias("apt_estimados"),
        sum("PLAZAS_ESTIMADAS").alias("plazas_estimadas"),
        sum("PERSONAL_EMPLEADO").alias("apt_personal_empleado")
    ).withColumn(
        # Apartment availability score (basado en ocupación de plazas)
        "apt_availability_score",
        100 - col("avg_ocupa_plazas")
    )
    
    return df_apartment_features

def create_leisure_features(df_leisure):
    """Create leisure-based features from actividades_ocio table."""
    print("  Creating leisure features...")
    df_leisure_features = df_leisure.groupBy(
        col("AÑO"),
        col("MES"),
        col("PROVINCIA"),
        col("PRODUCTO"),
        col("CATEGORIA")
    ).agg(
        sum("ENTRADAS").alias("ocio_total_entradas"),
        sum("VISITAS_PAGINAS").alias("ocio_total_visitas_paginas"),
        sum("GASTO_TOTAL").alias("ocio_gasto_total"),
        avg("PRECIO_MEDIO_ENTRADA").alias("ocio_precio_medio_entrada"),
        sum("TRANSACCIONES").alias("ocio_total_transacciones")
    ).withColumn(
        # Engagement score: visitas / transacciones (más alto = más interés online por compra)
        "ocio_engagement_score",
        (col("ocio_total_visitas_paginas") / (col("ocio_total_transacciones") + 1))
    ).withColumn(
        # Gasto medio por entrada
        "ocio_gasto_medio_por_entrada",
        (col("ocio_gasto_total") / (col("ocio_total_entradas") + 1))
    )

    return df_leisure_features

def create_air_quality_features(df_air):
    """Create air quality features from calidad_aire table."""
    print("  Creating air quality features...")
    df_air_features = df_air.groupBy(
        col("AÑO"),
        col("MES"),
        col("PROVINCIA")
    ).agg(
        # Porcentaje medio del mes de calidad de aire buena
        avg(when((col("CALIDAD_AIRE") == "Buena") | (col("CALIDAD_AIRE") == "Razonablemente buena"), col("PORCENTAJE_CALIDAD_AIRE"))).alias("aire_pct_buena"),
        # Porcentaje medio del mes de calidad de aire aceptable
        avg(when(col("CALIDAD_AIRE") == "Regular", col("PORCENTAJE_CALIDAD_AIRE"))).alias("aire_pct_aceptable"),
        # Porcentaje medio del mes de calidad de aire mala
        avg(when((col("CALIDAD_AIRE") == "Desfavorable") | (col("CALIDAD_AIRE") == "Extremadamente desfavorable") | (col("CALIDAD_AIRE") == "Muy desfavorable"), col("PORCENTAJE_CALIDAD_AIRE"))).alias("aire_pct_mala"),
        # Número de estaciones monitorizadas
        countDistinct("ESTACION").alias("aire_num_estaciones")
    ).withColumn(
        # Índice simplificado: pondera calidad (buena=2, aceptable=1, mala=0)
        "aire_quality_index",
        (
            col("aire_pct_buena") * 2 +
            col("aire_pct_aceptable") * 1 +
            col("aire_pct_mala") * 0
        ) / (col("aire_pct_buena") + col("aire_pct_aceptable") + col("aire_pct_mala") + 1e-6)
    )

    return df_air_features

def create_percepcion_features(df_percepcion):
    """Create traffic features from trafico_semana table."""
    print("  Creating traffic features...")

    df_percepcion_features = df_percepcion.groupBy(
        col("AÑO"),
        col("MES"),
        col("PROVINCIA")
    ).agg(
        avg("INIDICE_PERCEPCION_TURISTICA_GLOBAL").alias("indice_percepcion_turistica_global"),
        avg("INDICE_SATISFACCION_PRODUCTOS_TURISTICOS").alias("indice_satisfaccion_productos_turisticos"),
        avg("INDICE_PERCEPCION_SEGURIDAD").alias("indice_percepcion_seguridad"),
        sum("INDICE_PERCEPCION_CLIMATICA").alias("indice_percepcion_climatica"),
    )
    return df_percepcion_features

def crate_clima_features(df_clima:DataFrame):

    df_clima = (
        df_clima
        .withColumn("horaTemperaturaMinima_dec", convert_time_to_decimal("horaTemperaturaMinima")) 
        .withColumn("horaTemperaturaMaxima_dec", convert_time_to_decimal("horaTemperaturaMaxima")) 
        .groupBy(
            col("MES"),
            col("AÑO"),
            col("provincia")
        ).agg(
            avg("temperaturaMedia").alias("temp_media_mes"),
    
            # Precipitaciones
            sum("precipitacion").alias("precipitacion_total_mes"),
            count(when(col("precipitacion") > 0, 1)).alias("dias_lluvia_mes"),
            
            # Temperatura mínima y máxima
            avg("temperaturaMinima").alias("temp_min_media_mes"),
            min("temperaturaMinima").alias("temp_min_abs_mes"),
            avg("temperaturaMaxima").alias("temp_max_media_mes"),
            max("temperaturaMaxima").alias("temp_max_abs_mes"),
            
            # Rangos térmicos
            (avg("temperaturaMaxima") - avg("temperaturaMinima")).alias("rango_termico_medio"),
            (max("temperaturaMaxima") - min("temperaturaMinima")).alias("rango_termico_extremo"),
            
            # Extra: número de días cálidos / fríos
            count(when(col("temperaturaMaxima") > 30, 1)).alias("dias_calidos"),
            count(when(col("temperaturaMinima") < 0, 1)).alias("dias_helada"),
            avg("horaTemperaturaMinima_dec").alias("hora_temp_min_media"),
            avg("horaTemperaturaMaxima_dec").alias("hora_temp_max_media")
        )
    )

    df_clima = (
        df_clima
        .withColumn("hora_temp_min_media", convert_decimal_to_time("hora_temp_min_media"))
        .withColumn("hora_temp_max_media", convert_decimal_to_time("hora_temp_max_media"))
        .select(
            col("AÑO").alias("AÑO"),
            col("MES").alias("MES"),
            col("provincia").alias("PROVINCIA"),
            col("temp_media_mes"),
            col("precipitacion_total_mes"),
            col("dias_lluvia_mes"),
            col("temp_min_media_mes"),
            col("temp_min_abs_mes"),
            col("temp_max_media_mes"),
            col("temp_max_abs_mes"),
            col("rango_termico_medio"),
            col("rango_termico_extremo"),
            col("dias_calidos"),
            col("dias_helada"),
            col("hora_temp_min_media"),
            col("hora_temp_max_media")
        )
    )
    
    return df_clima

if __name__ == "__main__":

    spark = start_spark()
    print("=== Loading source tables ===")

    # ------------------------------
    # Hoteles
    #print("  Loading hotel occupancy data...")
    #df_hotels = utils.read_iceberg_table(
    #    spark=spark, 
    #    db_name="exploitation", 
    #    table_name="f_ocupacion_barcelona"
    #)
    #print(f"    Hotel records: {df_hotels.count()}")
    print("  Loading apartamentos data...")
    df_apartamentos = utils.read_iceberg_table(
        spark=spark,
        db_name="trusted",
        table_name="apartamentos_ocupacion_selected"
    )
    print(f"    Apartamentos records: {df_apartamentos.count()}")

    print("  Loading actividades ocio data...")
    df_ocio = utils.read_iceberg_table(
        spark=spark,
        db_name="trusted",
        table_name="actividades_Ocio_selected"
    )
    print(f"    Ocio records: {df_ocio.count()}")

    print("  Loading calidad aire data...")
    df_calidad = utils.read_iceberg_table(
        spark=spark,
        db_name="trusted",
        table_name="calidad_aire_selected"
    )
    print(f"    Calidad aire records: {df_calidad.count()}")

    print("  Loading percepcion data...")
    df_percepcion = utils.read_iceberg_table(
        spark=spark,
        db_name="trusted",
        table_name="percepcion_turista_selected"
    )
    print(f"    percepcion records: {df_percepcion.count()}")

    print("  Loading clima diario data...")
    df_clima_diario = utils.read_iceberg_table(
        spark=spark,
        db_name="trusted",
        table_name="aemet_clima_diario_trusted"
    )
    print(f" clima diario records: {df_clima_diario.count()}")

    #2. Generar features a partir de df_hotels
    print("=== Generating features ===")

    # Llamar a las funciones de features
    df_apartamentos_features = create_apartment_features(df_apartamentos)
    df_ocio_features         = create_leisure_features(df_ocio)
    df_calidad_features      = create_air_quality_features(df_calidad)
    df_percepcion_features   = create_percepcion_features(df_percepcion)
    df_clima_features        = crate_clima_features(df_clima_diario)

    print(f"apartamento features:{df_apartamentos_features.count()}")
    print(f"ocio features:{df_ocio_features.count()}")
    print(f"calidad aire features:{df_calidad_features.count()}")
    print(f"percepcion features:{df_percepcion_features.count()}")
    print(f"clima features:{df_clima_features.count()}")

    print("  Joining datasets...")

    # Join de los datasets
    join_cols = ["PROVINCIA", "AÑO", "MES"]
    df_joined = (
        df_percepcion_features.alias("t") 
        .join(df_ocio_features.alias("o"), join_cols, "left") 
        .join(df_calidad_features.alias("c"), join_cols, "left") 
        .join(df_apartamentos_features.alias("h"), join_cols, "left")
        .join(df_clima_features.alias("cl"), join_cols, "left")
    )
    print(f"    Joined records: {df_joined.count()}")

    window_spec = Window.partitionBy("PROVINCIA").orderBy(col("MES").desc())

    df_joined = df_joined.withColumns({
        "aire_pct_buena_lag1": lag("aire_pct_buena", 1).over(window_spec),
        "apt_availability_score_lag1": lag("apt_availability_score", 1).over(window_spec),
        "temp_min_media_mes_lag1": lag("temp_min_media_mes", 1).over(window_spec),
        "temp_max_media_mes_lag1": lag("temp_max_media_mes", 1).over(window_spec),
        "dias_lluvia_mes_lag1": lag("dias_lluvia_mes", 1).over(window_spec),
    })

    print("  Writing to Iceberg table...")
    utils.overwrite_iceberg_table(
        spark=spark,
        df=df_joined,
        db_name="exploitation",
        table_name="travelmind_features"
    )

    df_pd = df_joined.toPandas()

    
    df_pd.to_parquet("./data/warehouse/exploitation/tm_features_for_pd/travelmind_features.parquet")